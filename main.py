import os
import logging
import time
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Command
from aiogram.utils import executor

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
load_dotenv()


class Config:
    def __init__(self):
        load_dotenv()
        self.BOT_TOKEN = os.getenv('BOT_TOKEN')

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ADMIN_IDS
        admin_ids_str = os.getenv('ADMIN_IDS', '')
        self.ADMIN_IDS = []
        if admin_ids_str:
            try:
                self.ADMIN_IDS = [int(id.strip()) for id in admin_ids_str.split(',') if id.strip()]
            except ValueError:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_IDS –≤ .env —Ñ–∞–π–ª–µ")

        self.LOG_CHAT_ID = os.getenv('LOG_CHAT_ID')
        self.DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

        if not self.BOT_TOKEN:
            raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

config = Config()

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ====================
logging.basicConfig(
    level=logging.DEBUG if config.DEBUG else logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ====================
bot = Bot(token=config.BOT_TOKEN, parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø ====================
class Form(StatesGroup):
    choosing_category = State()
    writing_message = State()
    broadcast_message = State()
    user_lookup = State()


# ==================== –£–¢–ò–õ–ò–¢–´ ====================
def ensure_dirs():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏"""
    for directory in ['logs', 'data']:
        if not os.path.exists(directory):
            os.makedirs(directory)


def get_timestamp():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def save_message(category: str, user_data: dict, message_text: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
    try:
        filename = f"logs/{category}.txt"
        timestamp = get_timestamp()

        entry = (
            f"{timestamp} - {user_data['username']} "
            f"(ID: {user_data['user_id']}): {message_text}\n"
        )

        with open(filename, 'a', encoding='utf-8') as f:
            f.write(entry)

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False


def get_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    stats = {}
    categories = ["–†–∞–±–æ—Ç–∞", "–£—á—ë–±–∞", "–ü—Ä–æ—á–µ–µ"]

    for category in categories:
        filename = f"logs/{category}.txt"
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                stats[category] = len(f.readlines())
        else:
            stats[category] = 0

    return stats


def get_user_stats():
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        'total_users': 150,
        'active_today': 42,
        'online_now': 8,
        'messages_today': 125
    }


async def log_action(user_id: int, action: str):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ —á–∞—Ç"""
    if config.LOG_CHAT_ID:
        try:
            await bot.send_message(
                config.LOG_CHAT_ID,
                f"üìù –î–µ–π—Å—Ç–≤–∏–µ: {action}\nüë§ User ID: {user_id}\n‚è∞ –í—Ä–µ–º—è: {get_timestamp()}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
def create_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–†–∞–±–æ—Ç–∞", "–£—á—ë–±–∞")
    keyboard.row("–ü—Ä–æ—á–µ–µ")
    return keyboard


def create_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    keyboard.row("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    keyboard.row("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return keyboard


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================
@dp.message_handler(Command('start', 'help'))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    user_id = message.from_user.id

    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n\n"
        "<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ\n"
    )

    if config.is_admin(user_id):
        welcome_text += (
            "/admin - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/users - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
            "/broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞\n"
            "/userinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        )

    await message.answer(welcome_text, reply_markup=create_main_keyboard())
    await Form.choosing_category.set()
    await log_action(user_id, "started bot")


@dp.message_handler(Command('cancel'), state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state:
        await state.finish()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start",
            reply_markup=create_main_keyboard()
        )
        await log_action(message.from_user.id, "cancelled action")
    else:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å ü§∑‚Äç‚ôÇÔ∏è")


# ==================== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ====================
@dp.message_handler(Command('admin'))
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = message.from_user.id

    if not config.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    await message.answer(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_admin_keyboard()
    )
    await log_action(user_id, "opened admin panel")


@dp.message_handler(Command('stats'))
async def cmd_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    user_id = message.from_user.id

    if not config.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    stats = get_stats()
    user_stats = get_user_stats()
    total_messages = sum(stats.values())

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['total_users']}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_stats['messages_today']}\n"
        f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_stats['active_today']}\n"
        f"üîÑ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: {user_stats['online_now']}\n\n"
        "üìÅ <b>–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        f"üíº –†–∞–±–æ—Ç–∞: {stats.get('–†–∞–±–æ—Ç–∞', 0)}\n"
        f"üéì –£—á—ë–±–∞: {stats.get('–£—á—ë–±–∞', 0)}\n"
        f"üì¶ –ü—Ä–æ—á–µ–µ: {stats.get('–ü—Ä–æ—á–µ–µ', 0)}\n\n"
        f"üìà –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}"
    )

    await message.answer(stats_text)
    await log_action(user_id, "viewed statistics via command")


@dp.message_handler(Command('users'))
async def cmd_users(message: types.Message):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id

    if not config.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    user_stats = get_user_stats()

    users_text = (
        "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['total_users']}\n"
        f"üöÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {user_stats['active_today']}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_stats['messages_today']}\n"
        f"üü¢ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: {user_stats['online_now']}\n\n"
        "<i>–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /userinfo [ID]</i>"
    )

    await message.answer(users_text)
    await log_action(user_id, "viewed users list")


@dp.message_handler(Command('broadcast'))
async def cmd_broadcast(message: types.Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = message.from_user.id

    if not config.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if len(message.text.split()) < 2:
        await message.answer(
            "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞' –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"
        )
        return

    broadcast_text = ' '.join(message.text.split()[1:])
    user_stats = get_user_stats()

    await message.answer(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {broadcast_text}\n"
        f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {user_stats['total_users']}\n\n"
        f"<i>–≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º. –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.</i>"
    )
    await log_action(user_id, f"broadcast via command: {broadcast_text[:50]}...")


@dp.message_handler(Command('userinfo'))
async def cmd_userinfo(message: types.Message, state: FSMContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id = message.from_user.id

    if not config.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(message.text.split()) > 1:
        try:
            target_id = int(message.text.split()[1])

            user_info = (
                f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
                f"üÜî ID: {target_id}\n"
                f"üë§ –ò–º—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{target_id}\n"
                f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: 2024-01-15\n"
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: 42\n"
                f"üöÄ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π\n"
                f"üëë –†–æ–ª—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )

            await message.answer(user_info)
            await log_action(user_id, f"searched user info for ID: {target_id}")

        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    else:
        # –ó–∞–ø—Ä–æ—Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await Form.user_lookup.set()
        await log_action(user_id, "started user lookup")


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô ====================
@dp.message_handler(state=Form.choosing_category)
async def process_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text not in ["–†–∞–±–æ—Ç–∞", "–£—á—ë–±–∞", "–ü—Ä–æ—á–µ–µ"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:")
        return

    await state.update_data(chosen_category=message.text)
    await Form.writing_message.set()

    await message.answer(
        f"üìù –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{message.text}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
        "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await log_action(message.from_user.id, f"selected category: {message.text}")


@dp.message_handler(state=Form.writing_message)
async def process_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await state.get_data()
    category = user_data.get('chosen_category')

    if not category:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        await state.finish()
        return

    user_info = {
        'user_id': message.from_user.id,
        'username': message.from_user.username or message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º",
        'full_name': message.from_user.full_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    success = save_message(category, user_info, message.text)

    if success:
        response_text = (
            f"‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
            f"<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message.text}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {user_info['username']} - {category}")
    else:
        response_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    await message.answer(response_text, reply_markup=create_main_keyboard())
    await state.finish()
    await log_action(message.from_user.id, f"saved message in {category}")


@dp.message_handler(state=Form.broadcast_message)
async def admin_broadcast_send(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_stats = get_user_stats()

    await message.answer(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n"
        f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {user_stats['total_users']}\n\n"
        f"<i>–≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º. –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.</i>",
        reply_markup=create_admin_keyboard()
    )
    await state.finish()
    await log_action(message.from_user.id, f"sent broadcast: {message.text[:50]}...")


@dp.message_handler(state=Form.user_lookup)
async def process_user_lookup(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        target_id = int(message.text)

        user_info = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
            f"üÜî ID: {target_id}\n"
            f"üë§ –ò–º—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{target_id}\n"
            f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: 2024-01-15\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: 42\n"
            f"üöÄ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π\n"
            f"üëë –†–æ–ª—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n"
            f"<i>–≠—Ç–æ –¥–µ–º–æ-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.</i>"
        )

        await message.answer(user_info, reply_markup=create_admin_keyboard())
        await log_action(message.from_user.id, f"found user info for ID: {target_id}")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    await state.finish()


# ==================== –ê–î–ú–ò–ù-–ö–ù–û–ü–ö–ò ====================
@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and config.is_admin(message.from_user.id))
async def admin_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    stats = get_stats()
    user_stats = get_user_stats()
    total_messages = sum(stats.values())

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['total_users']}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_stats['messages_today']}\n"
        f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_stats['active_today']}\n"
        f"üîÑ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: {user_stats['online_now']}\n\n"
        "üìÅ <b>–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        f"üíº –†–∞–±–æ—Ç–∞: {stats.get('–†–∞–±–æ—Ç–∞', 0)}\n"
        f"üéì –£—á—ë–±–∞: {stats.get('–£—á—ë–±–∞', 0)}\n"
        f"üì¶ –ü—Ä–æ—á–µ–µ: {stats.get('–ü—Ä–æ—á–µ–µ', 0)}\n\n"
        f"üìà –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}"
    )

    await message.answer(stats_text)
    await log_action(message.from_user.id, "viewed statistics via button")


@dp.message_handler(lambda message: message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞" and config.is_admin(message.from_user.id))
async def admin_broadcast_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await message.answer(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await Form.broadcast_message.set()
    await log_action(message.from_user.id, "started broadcast via button")


@dp.message_handler(lambda message: message.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" and config.is_admin(message.from_user.id))
async def admin_users(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    user_stats = get_user_stats()

    users_text = (
        "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['total_users']}\n"
        f"üöÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {user_stats['active_today']}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_stats['messages_today']}\n"
        f"üü¢ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: {user_stats['online_now']}\n\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'"
    )

    await message.answer(users_text)
    await log_action(message.from_user.id, "viewed users via button")


@dp.message_handler(lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" and config.is_admin(message.from_user.id))
async def admin_find_user(message: types.Message):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await Form.user_lookup.set()
    await log_action(message.from_user.id, "started user search via button")


@dp.message_handler(lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=create_main_keyboard()
    )
    await Form.choosing_category.set()
    await log_action(message.from_user.id, "returned to main menu")


# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    ensure_dirs()
    logger.info("=" * 50)
    logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {config.ADMIN_IDS}")
    logger.info(f"üêõ Debug mode: {config.DEBUG}")
    logger.info("=" * 50)

    if config.LOG_CHAT_ID:
        try:
            await bot.send_message(config.LOG_CHAT_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")


async def on_shutdown(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    await bot.close()


if __name__ == '__main__':
    ensure_dirs()
    executor.start_polling(
        dp,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown
    )